import React, { Component } from "react";
import {
    Animated, View, Text, StyleSheet, Alert, Vibration
} from "react-native";
import * as Network from 'expo-network';
import {IDD,SECRETT} from './config.json' 

     

import 'react-native-get-random-values';
import { v4 as uuid } from "uuid";
import { Camera } from 'expo-camera'
import * as Permissions from "expo-permissions";
import { Container, Content, Header, Item, Icon, Input, Button, Footer } from 'native-base'
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons'
import { decode } from "base64-arraybuffer";
import * as Speech from 'expo-speech';

import Swiper from 'react-native-swiper'
import symbolicateStackTrace from "react-native/Libraries/Core/Devtools/symbolicateStackTrace";
//import * as RNS3 from "react-native-upload-aws-s3";
//Importing in different style

const AWS = require('aws-sdk');
var S3 = require("aws-sdk/clients/s3");

// Enter copied or downloaded access ID and secret key here
const ID = IDD
const SECRET = SECRETT;

const BUCKET_NAME = 'bucketforimageocr';
//const BUCKET_NAME = 'images-123123321321';

const s3bucket = new S3({
    accessKeyId: ID,
    secretAccessKey: SECRET,
    Bucket: BUCKET_NAME,
    signatureVersion: 'v4',
    region: 'ap-south-1',
});
const styless = StyleSheet.create({
  slideDefault: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  text: {
    color: 'white',
    fontSize: 30,
    fontWeight: 'bold',
	justifyContent: 'center',
	alignItems: 'center',
	fontFamily:'Roboto',
	marginTop:520
  },
  fadingContainer: {
    paddingVertical: 5,
    paddingHorizontal: 25,
    backgroundColor: "lightseagreen"
  },
  fadingText: {
    fontSize: 29,
    textAlign: "center",
    margin: 10,
    color : "#fff"
  },
})

class CameraComponent extends Component {
    constructor(props) {
        super()
        console.log("wr gye bhai")
		console.log(props.feature)
        this.state = {
            hasCameraPermission: null, camera: null,
            type: Camera.Constants.Type.back,			
			speech : {
				inProgress: false,
				pitch: 1,
				rate: 0.4,
			},
			feature:0,
			internetConnection:false,
			IWopacity: new Animated.Value(0),
			fadeAnimation1: new Animated.Value(1),
			fadeAnimation2: new Animated.Value(0),
			fadeAnimation4: new Animated.Value(0),
			fadeAnimation3: new Animated.Value(0),
			
			fadeAnimation: new Animated.Value(1)
		
        }
    }

    async UNSAFE_componentWillMount() {
        console.log('check this: ');
        // console.log(Permissions);
        var { status } = await Permissions.askAsync(Permissions.CAMERA);
        this.setState({ hasCameraPermission: status === 'granted' });
    }
	

      

       
        //debugger;
      

    

	recognize = async (fileId) =>{	
		console.log("Before calling :"+ fileId)
		var stringurl = 'https://2qtsjudl4a.execute-api.ap-south-1.amazonaws.com/deployed/recognize?Key='+fileId;
		console.log("String url :"+ stringurl)
		var x = 1;
		do {
		  var response = await fetch(stringurl);		  
		  var myJson = await response.json();
		  console.log(myJson,x);
		  x = x+1		  
		  if(myJson.message != 'Internal server error') {	
			console.log("Bolay ga");
			const {message} = myJson;
			Speech.speak(message);	
		  }
		if(x == 20){
			break;
		}
		}
		while (myJson.message == 'Internal server error'); 		
		console.log(fileId);
		console.log(myJson)
		
	}
	
	recognizeText = async (fileId) =>{	
		console.log("Before calling :"+ fileId)
		var stringurl = 'https://66yv31zy2j.execute-api.ap-south-1.amazonaws.com/deployed/ocr?Key='+fileId;
		console.log("String url :"+ stringurl)
		var x = 1;
		do {
		  var response = await fetch(stringurl);		  
		  var myJson = await response.json();
		  console.log(myJson,x);
		  x = x+1		  
		  if(myJson.message != 'Internal server error') {	
			console.log("Bolay ga");
			const {message} = myJson;		    
			
			this.state.speech.inProgress = true;
			Speech.speak(message, {
				  rate: this.state.rate,
				});	
			this.state.speech.inProgress = false;;
		  }
		  if(x == 20){
			  break;
		  }
		}
		while (myJson.message == 'Internal server error'); 		
		console.log(fileId);
		console.log(myJson)		
	}
	
	createTwoButtonAlert = () =>
    Alert.alert(
      "Alert Title",
      "My Alert Msg",
      [
        {
          text: "Cancel",
          onPress: () => console.log("Cancel Pressed"),
          style: "cancel"
        },
        { text: "OK", onPress: () => console.log("OK Pressed") }
      ],
      { cancelable: false }
    );

	ageDetect = async (base64) => {
		// fetch("http://3.7.252.32:8080/v1", {
        //     method: "POST",
        //     body: {"image":base64},
        //     headers:{
        //     }
        // }).then((res) => {
        //     //debugger;
		// 	console.log("age Detect");
		// 	console.log(base64)
		// 	//console.log(res.status);
		// 	//console.log(res.json().then(rest => console.log(rest)).catch(e => console.log(e)));
        //     const aaa = res;
        // }).catch((e) => {
        //     //debugger;
        //     const aaa = 123;
        //     console.log(e);
        // });
		let formData = new FormData();
		var base = ""
		formData.append("image",base)
		var stringurll = "http://3.7.252.32:8080/v1"
		fetch(stringurll,{
            method: "POST",
            body: JSON.stringify({ image: base }),
            headers:{
				'content-type': "application/x-www-form-urlencoded",
				'cache-control': "no-cache",
				'postman-token': "a30224dd-7d56-91a5-8daf-695062b7574d"
				}})
		.then((dat) => { console.log(dat.json(),dat.status,dat.text,dat.body,dat.formData);})
		.catch((err) => { console.log(err);})
		  
		//var myJson = await response.json();

		//console.log(response);
	}



    uploadFileAsync2 = async (base64) => {

        const arrayBuffer = decode(base64);
        ////debugger;

		console.log("fileId");
        const fileId = uuid();
		console.log(fileId);
        const signedUrlExpireSeconds = 60 * 15;

        const url = await s3bucket.getSignedUrlPromise("putObject", {
            Bucket: BUCKET_NAME,
            Key: `${fileId}`,
            ContentType: "binary",
            Expires: signedUrlExpireSeconds
        });
        ////debugger;
        const abc = url;

        fetch(url, {
            method: "PUT",
            body: arrayBuffer,
            headers:{
                "content-type":"binary",
                "content-encoding":"utf-8"
            }
        }).then((res) => {
            //debugger;
            const aaa = res;
        }).catch((e) => {
            //debugger;
            const aaa = 123;
            console.log(e);
        });
        //debugger;
        const yolo = 123;
		if(this.state.speech.inProgress != true){	
			if (this.state.feature == 1){
				this.recognizeText(fileId);
				console.log("OCR")
			}
			else{
				this.recognize(fileId);
				console.log("Image")
			}
			
		}
		else{
			this.createTwoButtonAlert();
		}
    }



    takePicture = async () => {
		
        const options = { quality: 0.5 ,base64: true };
        const data = await this.state.camera.takePictureAsync(options);
        //   console.log(data);
        console.log("Data should be logged above");
        //debugger;

        //console.log("\n\n\n\n\/n/n",data.base64,"\n\n\n\n\n/n/n\n\n");

        console.log(this.state.feature	);
		if(this.state.feature<2){
			this.uploadFileAsync2(data.base64);
			console.log(this.state.feature);
		}
		else if (this.state.feature==2){	
			console.log("Age");
			this.ageDetect(data.base64)
		}
		else if (this.state.feature==3){
			console.log("Scene");
		}
    }
	consoleCheck = () =>{
		console.log("Hellp");
	}
	fadeOutNew = () => {
		console.log("Who called you");
		Animated.timing(this.state.fadeAnimation, {
	
		  toValue: 0,
	
		  duration: 4000,
		  useNativeDriver:true
	
		}).start();
	
	  };
	
	fadeOut1 = () => {
			console.log("Fading out Object");
			Animated.timing(this.state.fadeAnimation1, {
			  toValue: 0,
			  duration: 2000,
			  useNativeDriver: true
			}).start();
			console.log("Fading out  values:",this.state.fadeAnimation1);
		  };
	fadeIn1 = () => {
		var x = this.state.fadeAnimation1;	
		Animated.timing(x, {
		  toValue: 0,
		  duration: 2000,
		  useNativeDriver:true
		}).start(()=>{console.log("Logged");});
		clearInterval();

	};
	fadeOut2 = () => {
			Animated.timing(this.state.fadeAnimation2, {
			  toValue: 0,
			  duration: 2000,
			  useNativeDriver: true
			}).start();
		  };
	fadeIn2 = () => {
		Animated.timing(this.state.fadeAnimation2, {
		  toValue: 1,
		  duration: 1,
		  useNativeDriver: true
		}).start();
	};
	fadeOut3 = () => {
		Animated.timing(this.state.fadeAnimation3, {
		  toValue: 0,
		  duration: 2000,
		  useNativeDriver: true
		}).start();
	  };
	fadeIn3 = () => {
			Animated.timing(this.state.fadeAnimation3, {
			toValue: 1,
			duration: 1,
			useNativeDriver: true
			}).start();
	};	
	fadeOut4 = () => {
			Animated.timing(this.state.fadeAnimation4, {
			toValue: 0,
			duration: 2000,
			useNativeDriver: true
			}).start();
	};
	fadeIn4 = () => {
		Animated.timing(this.state.fadeAnimation4, {
		toValue: 1,
		duration: 1,
		useNativeDriver: true
		}).start();
	};
	checkConnection = async ()=>{
		Network.getNetworkStateAsync()
		.then((val) => {
			this.state.internetConnection=val.isInternetReachable;
			console.log("Internet Available:",val.isInternetReachable);
			return true;
		})
		.catch((e) => {
			console.log(e);
			return false;
		})
	};
	internetWarn = () => {
		return <View style={{  height: 400,
			width: 300, borderRadius: 20, opacity: this.state.IWopacity, backgroundColor: 'white', elevation: 30,alignSelf:'center',alignItems:'center',justifyContent:'center',margin:20,position:'absolute' }}>
			<Text style={{ textAlign: "center", textAlignVertical: "center", fontSize: 40, }}>
							Internet is not available
			</Text>
		</View>;
	}
	
    render() {
        var { hasCameraPermission } = this.state;
		
        if (hasCameraPermission === null) {
            return <View />
        }
        else if (hasCameraPermission === false) {
            return <Text> No access to camera</Text>
        }
        else {
			this.checkConnection();
            return (
                    <Camera style={{ flex: 1, justifyContent: 'space-between' }} type={this.state.type} ref={(ref) => { this.state.camera = ref }} ratio={'16:9'} >	                      
                       <Header style={{backgroundColor: 'black'}}>
						   <View>
							   <Text style={{color:'white',fontSize:40,fontWeight:"700"}}>
								   VAVI
							   </Text>
							</View>
						</Header>				   
					   <Swiper removeClippedSubviews={true} loop={false} showsPagination={false} onIndexChanged = { (index) => {
								var speakk="Object Detection";
								Vibration.vibrate(100);					
								if (index == 0){		
									console.log("Vibration Index 0");
									this.fadeIn1();									
									this.state.feature = 0;
									this.fadeOut1();
								}
								else if (index == 1){
									this.fadeIn2();
									this.fadeOut2();
									this.state.feature = 1;
									speakk="Text Detection";
								}
								else if (index == 2){
									this.fadeIn3();
									this.fadeOut3();
									this.state.feature = 2;
									speakk="Age Detection";
								}
								else if (index == 3){
									this.fadeIn4();
									this.fadeOut4();
									this.state.feature = 3;
									speakk="Scene Description";
								}
								Speech.speak(speakk, {
								  rate: this.state.rate,
								});	
							console.log("Feature change" )} }>	

							<View style={styless.slideDefault}>
									<Animated.View style={{opacity:this.state.fadeAnimation1}}
									>
										<Text style={styless.text}>Object Detection</Text>
										{/* <Button onPress={this.fadeOutNew()}>*/}
											{/* </Button> */}
									</Animated.View>									
								
							</View>
							
							<View style={styless.slideDefault}> 
									<Animated.View
									  styless={[
										styless.fadingContainer,
										{ opacity: this.state.fadeAnimation2 }
									  ]}
									>
										<Text style={styless.text}>Text Detection</Text>
									</Animated.View>									
								
							</View>

							<View style={styless.slideDefault}> 
									<Animated.View
									  styless={[
										styless.fadingContainer,
										{ opacity: this.state.fadeAnimation3 }
									  ]}
									>
										<Text style={styless.text}>Age Detection</Text>
									</Animated.View>									
								
							</View>

							<View style={styless.slideDefault}> 
									<Animated.View
									  styless={[
										styless.fadingContainer,
										{ opacity: this.state.fadeAnimation4 }
									  ]}
									>
										<Text style={styless.text}>Scene Description</Text>
									</Animated.View>									
								
							</View>
						

						</Swiper>

						<View style={{ alignItems: 'center' ,backgroundColor:'black'}}>						
                                <MaterialCommunityIcons name="circle-outline"  style={{ color: 'white', fontSize: 100 }} onPress={() => {
										console.log("Vibrating");
										Vibration.vibrate(100);
										Network.getNetworkStateAsync()
										.then((val) => {
											this.state.internetConnection=val.isInternetReachable;
											console.log("Internet Available:",val.isInternetReachable);
											if(val.isInternetReachable){
												this.takePicture().then(() => { }).catch((e) => {
													//debugger;
													console.log("NAI CHALA")
													console.log(e)
												})
											}
											else{
												console.log("NAI CHALA");
												console.log(e);
												Speech.speak("Internet is not reachable. Please connect your device", {
														rate: this.state.rate,
													  });	
											}
											
										})
										.catch((e) => {
											console.log(e);
											Speech.speak("Internet is not reachable. Please connect your device", {
												rate: this.state.rate,
											  });	
										})





										
										// else{
										// 	Speech.speak("Internet is not reachable. Please connect your device", {
										// 	rate: this.state.rate,
										//   });	
										// }
                                    }}
                                >
								</MaterialCommunityIcons>
                            </View>							
						

                       
                    </Camera>
            )
        }
    }
}
export default CameraComponent;

const styles = StyleSheet.create({
    container: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center'
    }
});

